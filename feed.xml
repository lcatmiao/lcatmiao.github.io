

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>小黑猫</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2024-03-30T18:04:45+08:00</updated>
  <author>
    <name>小黑猫</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2024 小黑猫 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>真值与内存的相互转换</title>
    <link href="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" rel="alternate" type="text/html" title="真值与内存的相互转换" />
    <published>2024-03-30T17:58:00+08:00</published>
  
    <updated>2024-03-30T17:58:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C-Cpp" />
    
  

  
    <summary>
      





      总览

一些自创的名词定义：


  平时直接看到的数值，代码里直接书写的数值等，称为真值。
  将内存中存储的值拿出来写成数值，称为内存数值。用二进制表示的内存数值称为内存二进制，用十六进制表示的内存数值称为内存十六进制。
  在内存中实际存储的值称为内存值。


转换过程一张图：



一些说明：


  不妨认为真值本身没有计算机中有符号和无符号的概念。你可以视之为有符号或者无符号，走不同的转换流程。
  内存数值本身没有有符号和无符号的概念。你可以视之为有符号或者无符号，走不同的转换流程。
  虽然认为真值本身没有计算机中有符号和无符号的概念，但是仍认为真值在数学上有正负零的概念。
  负真值只能进行有符号转换；非负真值既可以进行有符号转换，又可以进行无符号转换。
  打印值的内存十六进制和以无符号十六进制形式打印值差不多是一个意思。此处“打印值”指“打印内存值”。


从真...
    </summary>
  

  </entry>

  
  <entry>
    <title>C语言标准发展历史</title>
    <link href="http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/" rel="alternate" type="text/html" title="C语言标准发展历史" />
    <published>2024-02-24T16:53:37+08:00</published>
  
    <updated>2024-02-24T16:53:37+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</id>
    <content src="http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C-Cpp" />
    
  

  
    <summary>
      





      对各种 C 标准进行简述。

参考资料：Standards (Using the GNU Compiler Collection (GCC))

ANSI C，ISO C89/90

ANSI C 是最初的 C 语言标准，在 1989 年获得批准，1990 年发布。

1990 年晚些时候，该标准成为了 ISO C89/90 标准。

这两个标准之间没有技术上的差异，可以当作就是一个标准。

C94/95 是这一标准的修订版本。

ISO C99

1999 年，ISO 发布了新的 C 标准，即 ISO C99。

ISO C11，ISO C17

2011 年，ISO 发布了新的 C 标准，即 ISO C11。

2017 年，ISO 编制了一个修正版本，并于 2018 年发布，该版本成为了新的 C 标准，即 ISO C17。

在 gcc 中，可通过 -std=c11 或 -st...
    </summary>
  

  </entry>

  
  <entry>
    <title>函数传参</title>
    <link href="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" rel="alternate" type="text/html" title="函数传参" />
    <published>2022-11-27T23:30:00+08:00</published>
  
    <updated>2022-11-27T23:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/</id>
    <content src="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C-Cpp" />
    
  

  
    <summary>
      





      传参分类

从传参类型上看

传参分为传值和传指针。


  传指针本质上也是传值，只不过传的是指针值。由于传一般值和传指针值还是有点区别，所以分成两种说法。传值一般就指传一般值，传指针专门用于描述传指针值。


从传参行为上看

传参分为值复制和传自己。


  传自己本质上也是值复制，只不过是取地址传无名指针，形参直接接上；而不是直接传有名指针。例如：


// 函数调用
func1(id, index, flag, &amp;amp;count);
func2(arr);

// 函数定义头
func1(int id, int index, int flag, int *p_count)
func2(int *arr)


其中，id，index，flag 是值复制，这毫无疑义。arr 是数组名，这里退化为指针，直接进行了传参，也就是我说的“直接传有名指针”，所以我将其归为值复制。&amp;a...
    </summary>
  

  </entry>

  
  <entry>
    <title>记一次指针强转导致脏数据写入问题</title>
    <link href="http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="记一次指针强转导致脏数据写入问题" />
    <published>2022-11-26T11:40:00+08:00</published>
  
    <updated>2022-11-26T11:40:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/</id>
    <content src="http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C-Cpp" />
    
  

  
    <summary>
      





      交接项目的时候遇到的一个问题，涉及指针、字节序、结构体内存对齐相关知识，三大知识包含规则的共同作用导致了这一问题。

问题描述

时间有些久远了，结合下图来讲，总之，就是变量 vsys_id 莫名其妙地被更改了。当时检查了可能出现问题的相关函数，以及函数传参过程，均没有发现问题所在，甚至在这些地方连 vsys_id 变量名都没有出现，以至于一直没能定位问题。最后发现 vsys_id 被脏数据写入了，也就是说，我们更改变量 policy_id 的同时把 vsys_id 也给改了，从而导致了问题。



问题分析

根据结构体内存对齐画出结构，可以发现 vsys_id 和 policy_id 是紧挨着的。原先指向 policy_id 的指针是 u16 * ，原代码对其进行了一个强转成 u32 * 的操作，这样一来，这个指针就指向了 policy_id 加 vsys_id 的4个字节，然后...
    </summary>
  

  </entry>

  
  <entry>
    <title>C-Cpp中的const关键字</title>
    <link href="http://0.0.0.0:4000/posts/C-Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/" rel="alternate" type="text/html" title="C-Cpp中的const关键字" />
    <published>2022-05-08T21:30:00+08:00</published>
  
    <updated>2022-05-08T21:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/C-Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <content src="http://0.0.0.0:4000/posts/C-Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C-Cpp" />
    
  

  
    <summary>
      





      记录一波 const 关键字的知识点。

概述

const 意为不可修改。

const 修饰的变量不可被修改， 是只读变量，也称这样的变量为常量。const 修饰的变量不可修改这一点是语法层面的限制，通过一些刻意构造的操作仍然可以修改变量的值，只是一般不会这样做。

const 也可以修饰指针，既可以限制指针指向的数据，又可以限制指针本身。

const 修饰变量

const int VexNum = 20;
int const VexNum = 20;


上述两种写法的效果是一样的。我们一般使用第一种。const 修饰变量，即定义了常量 VexNum。


  const 定义的常量一般单词首字母大写。


这个时候企图修改常量是不行的。

VexNum = 30; // error: assignment of read-only variable 'VexNum'


...
    </summary>
  

  </entry>

</feed>


