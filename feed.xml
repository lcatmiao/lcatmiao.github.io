

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>小黑猫</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-12-07T22:16:38+08:00</updated>
  <author>
    <name>小黑猫</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 小黑猫 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>函数传参</title>
    <link href="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" rel="alternate" type="text/html" title="函数传参" />
    <published>2022-11-27T23:30:00+08:00</published>
  
    <updated>2022-11-27T23:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/</id>
    <content src="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="学习" />
    
    <category term="C_Cpp" />
    
  

  
    <summary>
      





      传参分类

从传参类型上看

传参分为传值和传指针。


  传指针本质上也是传值，只不过传的是指针值。由于传一般值和传指针值还是有点区别，所以分成两种说法。传值一般就指传一般值，传指针专门用于描述传指针值。


从传参行为上看

传参分为值复制和传自己。


  传自己本质上也是值复制，只不过是取地址传无名指针，形参直接接上；而不是直接传有名指针。例如：


// 函数调用
func1(id, index, flag, &amp;amp;count);
func2(arr);

// 函数定义头
func1(int id, int index, int flag, int *p_count)
func2(int *arr)


其中，id，index，flag 是值复制，这毫无疑义。arr 是数组名，这里退化为指针，直接进行了传参，也就是我说的“直接传有名指针”，所以我将其归为值复制。&amp;a...
    </summary>
  

  </entry>

  
  <entry>
    <title>记一次指针强转导致脏数据写入问题</title>
    <link href="http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="记一次指针强转导致脏数据写入问题" />
    <published>2022-11-26T11:40:00+08:00</published>
  
    <updated>2022-11-26T11:40:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/</id>
    <content src="http://0.0.0.0:4000/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8C%87%E9%92%88%E5%BC%BA%E8%BD%AC%E5%AF%BC%E8%87%B4%E8%84%8F%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E9%97%AE%E9%A2%98/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="学习" />
    
    <category term="C_Cpp" />
    
  

  
    <summary>
      





      交接项目的时候遇到的一个问题，涉及指针、字节序、结构体内存对齐相关知识，三大知识包含规则的共同作用导致了这一问题。

问题描述

时间有些久远了，结合下图来讲，总之，就是变量 vsys_id 莫名其妙地被更改了。当时检查了可能出现问题的相关函数，以及函数传参过程，均没有发现问题所在，甚至在这些地方连 vsys_id 变量名都没有出现，以至于一直没能定位问题。最后发现 vsys_id 被脏数据写入了，也就是说，我们更改变量 policy_id 的同时把 vsys_id 也给改了，从而导致了问题。



问题分析

根据结构体内存对齐画出结构，可以发现 vsys_id 和 policy_id 是紧挨着的。原先指向 policy_id 的指针是 u16 * ，原代码对其进行了一个强转成 u32 * 的操作，这样一来，这个指针就指向了 policy_id 加 vsys_id 的4个字节，然后...
    </summary>
  

  </entry>

  
  <entry>
    <title>C_Cpp中的const关键字</title>
    <link href="http://0.0.0.0:4000/posts/C_Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/" rel="alternate" type="text/html" title="C_Cpp中的const关键字" />
    <published>2022-05-08T21:30:00+08:00</published>
  
    <updated>2022-05-08T21:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/C_Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <content src="http://0.0.0.0:4000/posts/C_Cpp%E4%B8%AD%E7%9A%84const%E5%85%B3%E9%94%AE%E5%AD%97/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="学习" />
    
    <category term="C_Cpp" />
    
  

  
    <summary>
      





      记录一波 const 关键字的知识点。

概述

const 意为不可修改。

const 修饰的变量不可被修改， 是只读变量，也称这样的变量为常量。const 修饰的变量不可修改这一点是语法层面的限制，通过一些刻意构造的操作仍然可以修改变量的值，只是一般不会这样做。

const 也可以修饰指针，既可以限制指针指向的数据，又可以限制指针本身。

const 修饰变量

const int VexNum = 20;
int const VexNum = 20;


上述两种写法的效果是一样的。我们一般使用第一种。const 修饰变量，即定义了常量 VexNum。


  const 定义的常量一般单词首字母大写。


这个时候企图修改常量是不行的。

VexNum = 30; // error: assignment of read-only variable 'VexNum'


...
    </summary>
  

  </entry>

  
  <entry>
    <title>MySQL数据类型转换</title>
    <link href="http://0.0.0.0:4000/posts/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/" rel="alternate" type="text/html" title="MySQL数据类型转换" />
    <published>2022-02-11T21:35:00+08:00</published>
  
    <updated>2022-02-11T21:35:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <content src="http://0.0.0.0:4000/posts/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="学习" />
    
    <category term="SQL" />
    
  

  
    <summary>
      





      关于MySQL的数据类型转换问题大概两年前就研究过了，只是那时候没有发博客的习惯，笔记记得也很简单。最近又遇到了这个问题，打开以往的笔记发现记得太简单了，自己看完了还是有好多疑问😭，故有了这篇文章。


  参考资料：

  MySQL :: MySQL 8.0 Reference Manual :: 12.11 Cast Functions and Operators

  MySQL :: MySQL 8.0 Reference Manual :: 12.3 Type Conversion in Expression Evaluation

  mysql 类型自动化转换问题 - whendream - 博客园

  谈谈MySQL隐式类型转换 - 知乎

  测试版本：

  MySQL 8.0.18


显式转换

cast()

CAST(expr AS type [ARR...
    </summary>
  

  </entry>

  
  <entry>
    <title>Jekyll Chirpy theme + Github搭建个人博客</title>
    <link href="http://0.0.0.0:4000/posts/Jekyll-Chirpy-theme-+-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" rel="alternate" type="text/html" title="Jekyll Chirpy theme + Github搭建个人博客" />
    <published>2022-02-05T14:43:00+08:00</published>
  
    <updated>2022-02-05T14:43:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/Jekyll-Chirpy-theme-+-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <content src="http://0.0.0.0:4000/posts/Jekyll-Chirpy-theme-+-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="学习" />
    
    <category term="杂知识" />
    
  

  
    <summary>
      





      本地写了不少markdown笔记，一直想自己建一个网站。最初的想法是完完全全自己写一个个人网站，全部自定义，不仅可以有技术笔记栏目还可以有其它记录感想，发表观点，发布工具的栏目。然而时间并不总是能自定义，总有些更优先的事项排在前面，加之自己技术水平还没成长到这个程度，于是退而求其次，选择已有框架搭建一个个人博客，先用之，毕竟都要毕业了，连个像样的博客都没有，实在说不过去。我并未放弃建站的想法，说不定以后就有了。

安装博客生成器

由于kali环境齐全，所以直接在kali下安装本地博客

# 安装jekyll
sudo gem install jekyll

# 安装chirpy主题
git clone git@github.com:cotes2020/jekyll-theme-chirpy.git

# 在jekyll-theme-chirpy目录下安装依赖
# 不需要sudo，命...
    </summary>
  

  </entry>

</feed>


