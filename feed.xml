

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>小黑猫</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2025-06-01T21:58:53+08:00</updated>
  <author>
    <name>小黑猫</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2025 小黑猫 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>死机定位-内存不足死在vmalloc</title>
    <link href="http://0.0.0.0:4000/posts/%E6%AD%BB%E6%9C%BA%E5%AE%9A%E4%BD%8D-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%AD%BB%E5%9C%A8vmalloc/" rel="alternate" type="text/html" title="死机定位-内存不足死在vmalloc" />
    <published>2025-06-01T20:30:00+08:00</published>
  
    <updated>2025-06-01T20:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E6%AD%BB%E6%9C%BA%E5%AE%9A%E4%BD%8D-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%AD%BB%E5%9C%A8vmalloc/</id>
    <content src="http://0.0.0.0:4000/posts/%E6%AD%BB%E6%9C%BA%E5%AE%9A%E4%BD%8D-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%AD%BB%E5%9C%A8vmalloc/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="Linux" />
    
  

  
    <summary>
      





      定位过程

死机调用栈如下，推栈结果与 bt 结果大差不差。由一个终端程序一路调用到 vmalloc，最后死在其内部。注意到函数 out_of_memory，这表明可能是系统内存快耗尽了。

[0]kdb&amp;gt; bt
Stack traceback for pid 693
0xffff880362416740      693        1  1    0   R  0xffff8803624171c0 *vtysh
[15792.666500]  ffff88042d6bb818 0000000000000018 ffffffff818604c0 ffff88042d6bb858
[15792.755452]  ffffffff8109f38e ffff88042d6bb848 ffffffff817a6588 000000000040adbd
[15792.844406] ...
    </summary>
  

  </entry>

  
  <entry>
    <title>用户态源码反汇编定位方法记录</title>
    <link href="http://0.0.0.0:4000/posts/%E7%94%A8%E6%88%B7%E6%80%81%E6%BA%90%E7%A0%81%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="用户态源码反汇编定位方法记录" />
    <published>2025-05-24T21:55:00+08:00</published>
  
    <updated>2025-05-24T21:55:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%94%A8%E6%88%B7%E6%80%81%E6%BA%90%E7%A0%81%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%94%A8%E6%88%B7%E6%80%81%E6%BA%90%E7%A0%81%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C" />
    
  

  
    <summary>
      





      前言

问题背景就是进程崩溃，产生了 core 文件。其实这次定位非常简单，bt, disassemble 就能直接看出来了。既然简单，就利用这次机会尝试了一下源码反汇编的定位方法。此前在别人的帮助下，运用该方法定位过内核态的问题，但都事发紧急，事后没能复盘，留下了遗憾。尽管存在差异，还是决定在用户态“模拟”一下。

定位过程

Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007fcff9ad157a in check ()
   from ....so
(gdb) bt
#0  0x00007fcff9ad157a in check ()
   from ....so
#1  0x00007fcff9ad27c1 in func ()
   from ....so
#2  0x00007fc...
    </summary>
  

  </entry>

  
  <entry>
    <title>gdb无-g调试实战记录</title>
    <link href="http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="gdb无-g调试实战记录" />
    <published>2025-04-24T22:00:00+08:00</published>
  
    <updated>2025-04-24T22:00:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</id>
    <content src="http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C" />
    
  

  
    <summary>
      





      问题背景

设备外发日志的内容错乱，甚至产生 core 文件。版本是正常编译的发行版本，没有附带 -g 加入的调试信息。

我懒得加调试信息也不想加 -g 重新编译，二者在本人的开发环境中都十分麻烦。这种无 -g 调试的场景其实还蛮常见的，这次定位比较顺利，故记录之。

定位过程

从现象上看是日志内容错位了，但也不能排除是踩内存，出界内容被直接解析也能出现类似的现象。通过看代码，我高度怀疑日志结构体在传参进入函数 output_syslog(log_s *in_buffer) 的时候就已经有问题了。没有 -g 的话，就只能进行有限的调试，通过跟踪地址、强看汇编来定位。

gdb 给怀疑的函数 output_syslog() 打断点，命中后，寄存器信息如下：

(gdb) b output_syslog 
Breakpoint 1 at 0x43ed38
(gdb) c
Contin...
    </summary>
  

  </entry>

  
  <entry>
    <title>简析HTTPS</title>
    <link href="http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/" rel="alternate" type="text/html" title="简析HTTPS" />
    <published>2025-04-15T18:50:00+08:00</published>
  
    <updated>2025-04-15T18:50:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="Network" />
    
  

  
    <summary>
      





      写在前面

阅读《图解HTTP》，大致理解了 SSL/TLS 的握手过程和思想原理。然而作为入门书，它没有介绍基于 DH 算法的 TLS 握手过程，也没有介绍证书链相关的知识😡。我 Google 了不少资料，着重啃了几篇文章，结合抓包分析，本想“差不多得了”，却没料到入了大坑，疑问不减反增。

一筹莫展之际，AI 技术大火，救我狗命。受此鼓舞，借助 AI 解惑，又打起精神啃读了多个 RFC 片段，遂拨云见日。本文既成，虽得益于天时，然亦可谓一波三折，历尽艰辛。我真牛逼👍。

本文主要基于 TLS1.2 研写，知识整理于此👇。

先行概念

&amp;gt; 密码体制

密码学主要有两种体制：


  共享密码体制（对称密码体制）
  公钥密码体制（非对称密码体制）


&amp;gt; 数学难题

公钥密码体制主要基于以下数学难题：


  大整数分解问题
  离散对数问题（DLP）
    
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>真值与内存的相互转换</title>
    <link href="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" rel="alternate" type="text/html" title="真值与内存的相互转换" />
    <published>2024-03-30T17:58:00+08:00</published>
  
    <updated>2024-03-30T17:58:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="Misc" />
    
  

  
    <summary>
      





      总览

一些自创的名词定义：


  
    在内存中实际存储的值称为内存值。
  
  
    内存值经过字节序转换后，以无符号形式写成的数值，称为内存数值。内存数值用来直观纯粹地反映内存值的样貌。

    用二进制表示的内存数值称为内存二进制。

    用十六进制表示的内存数值称为内存十六进制。

    用八进制表示的内存数值称为内存八进制。

    用无符号十进制表示的内存数值称为内存十进制。
  
  
    平时直接看到的数值，代码里直接书写的数值等，称为真值。
  


转换过程一张图：



一些说明：


  
    不妨认为真值这个概念还在数学范畴，有正、负、零的概念，还没有计算机科学范畴中有符号、无符号的概念。接下来，进入计算机科学范畴，你可以视之为有符号数或者无符号数。
  
  
    负真值只能视作有符号数；非负真值既可以视作有符号数，又可...
    </summary>
  

  </entry>

</feed>


