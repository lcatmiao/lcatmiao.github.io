

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>小黑猫</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2025-04-24T22:24:39+08:00</updated>
  <author>
    <name>小黑猫</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2025 小黑猫 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>gdb无-g调试实战记录</title>
    <link href="http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="gdb无-g调试实战记录" />
    <published>2025-04-24T22:00:00+08:00</published>
  
    <updated>2025-04-24T22:00:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</id>
    <content src="http://0.0.0.0:4000/posts/gdb%E6%97%A0-g%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C" />
    
  

  
    <summary>
      





      问题背景

设备外发日志的内容错乱，甚至产生 core 文件。版本是正常编译的发行版本，没有附带 -g 加入的调试信息。

我懒得加调试信息也不想加 -g 重新编译，二者在本人的开发环境中都十分麻烦。这种无 -g 调试的场景其实还蛮常见的，这次定位比较顺利，故记录之。

定位过程

从现象上看是日志内容错位了，但也不能排除是踩内存，出界内容被直接解析也能出现类似的现象。通过看代码，我高度怀疑日志结构体在传参进入函数 output_syslog(log_s *in_buffer) 的时候就已经有问题了。没有 -g 的话，就只能进行有限的调试，通过跟踪地址、强看汇编来定位。

gdb 给怀疑的函数 output_syslog() 打断点，命中后，栈帧、寄存器信息如下：

(gdb) b output_syslog 
Breakpoint 1 at 0x43ed38
(gdb) c
Con...
    </summary>
  

  </entry>

  
  <entry>
    <title>简析HTTPS</title>
    <link href="http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/" rel="alternate" type="text/html" title="简析HTTPS" />
    <published>2025-04-15T18:50:00+08:00</published>
  
    <updated>2025-04-15T18:50:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%AE%80%E6%9E%90HTTPS/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="Network" />
    
  

  
    <summary>
      





      写在前面

阅读《图解HTTP》，大致理解了 SSL/TLS 的握手过程和思想原理。然而作为入门书，它没有介绍基于 DH 算法的 TLS 握手过程，也没有介绍证书链相关的知识😡。我 Google 了不少资料，着重啃了几篇文章，结合抓包分析，本想“差不多得了”，却没料到入了大坑，疑问不减反增。

一筹莫展之际，AI 技术大火，救我狗命。受此鼓舞，借助 AI 解惑，又打起精神啃读了多个 RFC 片段，遂拨云见日。本文既成，虽得益于天时，然亦可谓一波三折，历尽艰辛。我真牛逼👍。

本文主要基于 TLS1.2 研写，知识整理于此👇。

先行概念

&amp;gt; 密码体制

密码学主要有两种体制：


  共享密码体制（对称密码体制）
  公钥密码体制（非对称密码体制）


&amp;gt; 数学难题

公钥密码体制主要基于以下数学难题：


  大整数分解问题
  离散对数问题（DLP）
    
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>真值与内存的相互转换</title>
    <link href="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" rel="alternate" type="text/html" title="真值与内存的相互转换" />
    <published>2024-03-30T17:58:00+08:00</published>
  
    <updated>2024-03-30T17:58:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    <content src="http://0.0.0.0:4000/posts/%E7%9C%9F%E5%80%BC%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="Misc" />
    
  

  
    <summary>
      





      总览

一些自创的名词定义：


  
    在内存中实际存储的值称为内存值。
  
  
    内存值经过字节序转换后，以无符号形式写成的数值，称为内存数值。内存数值用来直观纯粹地反映内存值的样貌。

    用二进制表示的内存数值称为内存二进制。

    用十六进制表示的内存数值称为内存十六进制。

    用八进制表示的内存数值称为内存八进制。

    用无符号十进制表示的内存数值称为内存十进制。
  
  
    平时直接看到的数值，代码里直接书写的数值等，称为真值。
  


转换过程一张图：



一些说明：


  
    不妨认为真值这个概念还在数学范畴，有正、负、零的概念，还没有计算机科学范畴中有符号、无符号的概念。接下来，进入计算机科学范畴，你可以视之为有符号数或者无符号数。
  
  
    负真值只能视作有符号数；非负真值既可以视作有符号数，又可...
    </summary>
  

  </entry>

  
  <entry>
    <title>C语言标准发展历史</title>
    <link href="http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/" rel="alternate" type="text/html" title="C语言标准发展历史" />
    <published>2024-02-24T16:53:37+08:00</published>
  
    <updated>2024-02-24T16:53:37+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</id>
    <content src="http://0.0.0.0:4000/posts/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C" />
    
  

  
    <summary>
      





      对各种 C 标准进行简述。

参考资料：Standards (Using the GNU Compiler Collection (GCC))

ANSI C，ISO C89/90

ANSI C 是最初的 C 语言标准，在 1989 年获得批准，1990 年发布。

1990 年晚些时候，该标准成为了 ISO C89/90 标准。

这两个标准之间没有技术上的差异，可以当作就是一个标准。

C94/95 是这一标准的修订版本。

ISO C99

1999 年，ISO 发布了新的 C 标准，即 ISO C99。

ISO C11，ISO C17

2011 年，ISO 发布了新的 C 标准，即 ISO C11。

2017 年，ISO 编制了一个修正版本，并于 2018 年发布，该版本成为了新的 C 标准，即 ISO C17。

在 gcc 中，可通过 -std=c11 或 -st...
    </summary>
  

  </entry>

  
  <entry>
    <title>函数传参</title>
    <link href="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" rel="alternate" type="text/html" title="函数传参" />
    <published>2022-11-27T23:30:00+08:00</published>
  
    <updated>2022-11-27T23:30:00+08:00</updated>
  
    <id>http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/</id>
    <content src="http://0.0.0.0:4000/posts/%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82/" />
    <author>
      <name>{"name"=>"小黑猫", "link"=>"https://github.com/lcatmiao"}</name>
    </author>

  
    
    <category term="Tech" />
    
    <category term="C" />
    
  

  
    <summary>
      





      传参分类

从传参类型上看

传参分为传值和传指针。


  传指针本质上也是传值，只不过传的是指针值。由于传一般值和传指针值还是有点区别，所以分成两种说法。传值一般就指传一般值，传指针专门用于描述传指针值。


从传参行为上看

传参分为值复制和传自己。


  传自己本质上也是值复制，只不过是取地址传无名指针，形参直接接上；而不是直接传有名指针。例如：


// 函数调用
func1(id, index, flag, &amp;amp;count);
func2(arr);

// 函数定义头
func1(int id, int index, int flag, int *p_count)
func2(int *arr)


其中，id，index，flag 是值复制，这毫无疑义。arr 是数组名，这里退化为指针，直接进行了传参，也就是我说的“直接传有名指针”，所以我将其归为值复制。&amp;a...
    </summary>
  

  </entry>

</feed>


